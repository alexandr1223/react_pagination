{"version":3,"sources":["components/Pagination/Pagination.tsx","functions/listOfPages.ts","App.tsx","index.tsx"],"names":["Pagination","total","page","perPage","onPageChange","nextPage","prevPage","withInfo","useState","prevActive","setPrevActive","nextActive","setNextActive","maxPage","Math","ceil","useEffect","pages","useMemo","resultList","push","unshift","listOfPages","className","endInfo","withInfoData","type","onClick","disabled","map","item","Number","isNaN","nanoid","ClassNames","item_active","App","setPage","setPerPage","pageNum","prevState","name","value","onChange","e","target","ReactDOM","render","document","getElementById"],"mappings":"8OAiBaA,EAA8B,SAAC,GAQrC,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,KACAC,EAKI,EALJA,QACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,SAEI,IADJC,gBACI,SACJ,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAAUC,KAAKC,KAAKd,EAAQE,GAElCa,qBAAU,WAENN,EADW,IAATR,GAOFU,EADEV,IAASW,KAKZ,CAACX,IAEJ,IAYMe,EAAQC,mBAAQ,WACpB,OC1DuB,SAAChB,EAAcD,EAAeE,GACvD,IAAMgB,EAAkC,GAElCN,EAAUC,KAAKC,KAAKd,EAAQE,GA6BlC,OA1BAgB,EAAWC,KAAKlB,GAEZA,EAAO,EANK,GAOdiB,EAAWE,QAAQnB,EAAO,GAGxBA,EAAO,GACTiB,EAAWE,QATD,OAFI,IAcZnB,GACFiB,EAAWE,QAfG,GAkBZnB,EAAO,EAAIW,GACbM,EAAWC,KAAKlB,EAAO,GAGrBA,EAAOW,EAAU,GACnBM,EAAWC,KArBD,OAwBRlB,IAASW,GACXM,EAAWC,KAAKP,GAGXM,ED0BEG,CAAYpB,EAAMD,EAAOE,KAC/B,CAACF,EAAOC,EAAMC,IAcjB,OACE,sBAAKoB,UAAU,aAAf,UACGhB,EACG,+BAfa,WACnB,IAAMiB,EAAUtB,EAAOC,EAAUF,EAC7BA,EACAC,EAAOC,EAEX,MAAM,GAAN,OAAUA,GAAWD,EAAO,GAAK,EAAjC,cACEsB,EAAUvB,EACNA,EACAuB,EAHN,eAIOvB,GAMMwB,KACP,GAEJ,sBAAKF,UAAU,oBAAf,UACE,wBACEG,KAAK,SACLH,UAAU,WACVI,QAtCgB,WAClBzB,EAAO,EAAI,GACbI,KAqCIsB,UAAWnB,EAJb,SAMG,OAGH,oBAAIc,UAAU,mBAAd,SACGN,EAAMY,KAAI,SAACC,GACV,OAAKC,OAAOC,MAAMF,GAmBhB,6BACE,wBACEJ,KAAK,SAELH,UAAU,OAHZ,SAKGO,GAHIG,iBApBP,6BACE,wBACEP,KAAK,SAELH,UAAWW,IACT,OACA,CAAEC,YAAaL,IAAS5B,IAE1ByB,QAAS,kBAAMvB,GAAc0B,IAP/B,SASGA,GAPIG,sBA2BjB,wBACEP,KAAK,SACLH,UAAU,WACVI,QA3EgB,WAClBzB,EAAOW,GACTR,KA0EIuB,UAAWjB,EAJb,SAMG,cE1EIyB,G,MAnDO,WACpB,MAAwB5B,mBAAiB,IAAzC,mBAAON,EAAP,KAAamC,EAAb,KACA,EAA8B7B,mBAAiB,GAA/C,mBAAOL,EAAP,KAAgBmC,EAAhB,KAIMlC,EAAe,SAACmC,GACpBF,EAAQE,IAWV,OACE,sBAAKhB,UAAU,OAAf,UACE,cAAC,EAAD,CACEtB,MAAO,GACPE,QAASA,EACTD,KAAMA,EACNE,aAAcA,EACdC,SAfW,WACfgC,GAAQ,SAAAG,GAAS,OAAIA,EAAY,MAe7BlC,SAZW,WACf+B,GAAQ,SAAAG,GAAS,OAAIA,EAAY,MAY7BjC,UAvBW,IAyBb,wBACEkC,KAAK,UACLlB,UAAU,UACVmB,MAAOvC,EACPwC,SAAU,SAACC,GACTxC,EAAa,GACbkC,GAAYM,EAAEC,OAAOH,QANzB,SA1BgB,CAAC,EAAG,EAAG,GAAI,IAmCZb,KAAI,SAAAC,GAAI,OACnB,wBAEEY,MAAOZ,EAFT,SAIGA,GAHIA,aCzCjBgB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.de48c8cc.chunk.js","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\nimport ClassNames from 'classnames';\nimport { nanoid } from 'nanoid';\nimport { listOfPages } from '../../functions/listOfPages';\n\nimport './Pagination.scss';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  page: number,\n  onPageChange: (num: number) => void,\n  nextPage: () => void,\n  prevPage: () => void,\n  withInfo?: boolean,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  page,\n  perPage,\n  onPageChange,\n  nextPage,\n  prevPage,\n  withInfo = false,\n}) => {\n  const [prevActive, setPrevActive] = useState(true);\n  const [nextActive, setNextActive] = useState(true);\n\n  const maxPage = Math.ceil(total / perPage);\n\n  useEffect(() => {\n    if (page === 1) {\n      setPrevActive(false);\n    } else {\n      setPrevActive(true);\n    }\n\n    if (page === maxPage) {\n      setNextActive(false);\n    } else {\n      setNextActive(true);\n    }\n  }, [page]);\n\n  const prevPageHandler = () => {\n    if (page - 1 > 0) {\n      prevPage();\n    }\n  };\n\n  const nextPageHandler = () => {\n    if (page < maxPage) {\n      nextPage();\n    }\n  };\n\n  const pages = useMemo(() => {\n    return listOfPages(page, total, perPage);\n  }, [total, page, perPage]);\n\n  const withInfoData = () => {\n    const endInfo = page * perPage > total\n      ? total\n      : page * perPage;\n\n    return `${perPage * (page - 1) + 1} - ${\n      endInfo > total\n        ? total\n        : endInfo\n    } of ${total}`;\n  };\n\n  return (\n    <div className=\"pagination\">\n      {withInfo\n        ? <span>{withInfoData()}</span>\n        : ''}\n\n      <div className=\"pagination__block\">\n        <button\n          type=\"button\"\n          className=\"prev-btn\"\n          onClick={prevPageHandler}\n          disabled={!prevActive}\n        >\n          {'<<'}\n        </button>\n\n        <ul className=\"pagination__list\">\n          {pages.map((item: number | string) => {\n            if (!Number.isNaN(item)) {\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    key={nanoid()}\n                    className={ClassNames(\n                      'item',\n                      { item_active: item === page },\n                    )}\n                    onClick={() => onPageChange(+item)}\n                  >\n                    {item}\n                  </button>\n                </li>\n              );\n            }\n\n            return (\n              <li>\n                <button\n                  type=\"button\"\n                  key={nanoid()}\n                  className=\"item\"\n                >\n                  {item}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"next-btn\"\n          onClick={nextPageHandler}\n          disabled={!nextActive}\n        >\n          {'>>'}\n        </button>\n      </div>\n    </div>\n  );\n};\n","export const listOfPages = (page: number, total: number, perPage: number) => {\n  const resultList: (string | number)[] = [];\n  const minPage = 1;\n  const maxPage = Math.ceil(total / perPage);\n  const etc = '...';\n\n  resultList.push(page);\n\n  if (page - 1 > minPage) {\n    resultList.unshift(page - 1);\n  }\n\n  if (page > 3) {\n    resultList.unshift(etc);\n  }\n\n  if (page !== minPage) {\n    resultList.unshift(minPage);\n  }\n\n  if (page + 1 < maxPage) {\n    resultList.push(page + 1);\n  }\n\n  if (page < maxPage - 2) {\n    resultList.push(etc);\n  }\n\n  if (page !== maxPage) {\n    resultList.push(maxPage);\n  }\n\n  return resultList;\n};\n","import React, { useState } from 'react';\nimport { Pagination } from './components/Pagination';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const [page, setPage] = useState<number>(10);\n  const [perPage, setPerPage] = useState<number>(3);\n  const perPageList = [3, 5, 10, 20];\n  const withInfo = true;\n\n  const onPageChange = (pageNum: number) => {\n    setPage(pageNum);\n  };\n\n  const nextPage = () => {\n    setPage(prevState => prevState + 1);\n  };\n\n  const prevPage = () => {\n    setPage(prevState => prevState - 1);\n  };\n\n  return (\n    <div className=\"main\">\n      <Pagination\n        total={42}\n        perPage={perPage}\n        page={page}\n        onPageChange={onPageChange}\n        nextPage={nextPage}\n        prevPage={prevPage}\n        withInfo={withInfo}\n      />\n      <select\n        name=\"perPage\"\n        className=\"perPage\"\n        value={perPage}\n        onChange={(e) => {\n          onPageChange(1);\n          setPerPage(+e.target.value);\n        }}\n      >\n        {perPageList.map(item => (\n          <option\n            key={item}\n            value={item}\n          >\n            {item}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}